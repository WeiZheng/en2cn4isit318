<?php

/**
 * @file
 * Automatic unit test for the en2cn_user module
 */

class En2CnUserTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'en2cn_user module functionalities',
      'description' => 'Test functionalities in the en2cn_user module.',
      'group' => 'en2cn Project',
    );
  }

  public function setUp() {
    parent::setUp('en2cn_user');
  }

  public function testUserInsert() {
    $new_user = array(
      'name' => 'weizheng',
      'pass' => user_password(),
      'mail' => 'pro_zw@tom.com'
    );
    $account = user_save(null, $new_user);

    // Check if the new en2cn_user has been created
    $query = db_select('en2cn_user', 'n')
      ->fields('n', array('uid', 'points'))
      ->condition('n.uid', $account->uid);
    $result = $query->execute();

    $this->assertEqual(count($result), 1, t('One user has been added'));

    $record = $result->fetchAssoc();
    $this->assertEqual($record['uid'], $account->uid, t('The uid is confirmed'));
    $this->assertEqual($record['points'], 0, t('The initial points of the user is 0'));

    // Assert insert same uid will not cause exception and just return TRUE,
    // which means the insert is ignored
    $this->assertTrue(entity_get_controller('en2cn_user')->insert($account),
      t('Insert duplicated user has been ignored'));
  }

  public function testControllerDelete() {
    // Each test is independent, so firstly, we need to add a user
    $new_user = array(
      'name' => 'weizheng',
      'pass' => user_password(),
      'mail' => 'pro_zw@tom.com'
    );
    user_save(null, $new_user);

    $new_user = user_load_by_mail('pro_zw@tom.com');
    $this->assertEqual($new_user->name, 'weizheng', t('The user has been loaded'));

    user_delete($new_user->uid);

    // Check if the new en2cn_user just added has been delete
    $query = db_select('en2cn_user', 'n')
      ->fields('n', array('uid', 'points'))
      ->condition('n.uid', $new_user->uid);
    $result = $query->execute();

    $this->assertFalse($result->fetchAssoc(), t('The user has been deleted'));
  }

  public function tearDown() {
    parent::tearDown();
  }

}
